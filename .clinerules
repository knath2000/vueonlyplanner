# .clinerules - Project Intelligence for Only Task Manager

## Core Patterns & Practices

- **State Management:** Use Pinia (`src/stores/`) as the primary state management library. Create separate stores for distinct data domains (e.g., `projectStore`, `taskStore`, `authStore`). **For global counts needed on the dashboard (like total 'To Do' tasks), `taskStore` maintains a separate state (`allUserTasks`) populated by a dedicated action (`fetchAllUserTasks`) triggered after projects load, distinct from the `tasks` state used for project-specific views.**
- **Real-time Data Sync:** Implement real-time data fetching and updates using Supabase Realtime subscriptions (`supabase.channel().on()`). **Pinia stores (`projectStore`, `taskStore`) now `watch` the `authStore.currentUser` state for subsequent login/logout events.**
  - On login (`newUser` exists), `projectStore` automatically calls its `subscribeToProjects` action. `taskStore` requires explicit project selection to subscribe to project-specific tasks.
  - On logout (`newUser` is null), both stores call their respective `unsubscribe` actions and clear local data (including `allUserTasks` in `taskStore`).
  - **Initial Data Load on Refresh:** On application initialization and Supabase session restoration, `authStore` explicitly triggers `projectStore.subscribeToProjects()`. After the initial project fetch within `projectStore.subscribeToProjects()` completes, `projectStore` triggers `taskStore.fetchAllUserTasks()` to populate dashboard data. This ensures data persistence across refreshes when logged in.
  - **Subscription Reconnection:** `projectStore` includes logic in its `subscribeToProjects` action to listen for `CLOSED` or `TIMED_OUT` events on the Supabase channel and attempt re-subscription after a short delay.
  - **REPLICA IDENTITY for DELETEs:** For Realtime `DELETE` events to include the necessary `payload.old` data (containing the ID) used by the client-side handler, the PostgreSQL table (e.g., `projects`, `tasks`) **must** have its `REPLICA IDENTITY` set to `FULL`. This can be done via SQL: `ALTER TABLE public.your_table_name REPLICA IDENTITY FULL;`. If set to `DEFAULT` ('d'), `DELETE` events might not be broadcast correctly by Realtime.
  - Data queries and access are filtered and controlled by Supabase Row Level Security (RLS) and client-side queries filtering by `user_id`.
- **Authentication:** Using Supabase Authentication (Email/Password, Google OAuth). Users must explicitly sign up or log in; anonymous sign-in is not directly supported. **`AuthModal.vue` now uses `authStore.login` and `authStore.register` actions for authentication.**
- **Component Architecture:**
  - Use Views (`src/views/`) for top-level routed components.
  - Create reusable Components (`src/components/`) for UI elements (e.g., `ProjectCard`, `TaskCard`, `BaseModal`, `AuthModal`). **Created `ProjectDetailModal.vue`, `AddTaskModal.vue`, `EditTaskModal.vue`, `ProjectDetailHeader.vue`, `TaskList.vue`, `AddProjectModal.vue`, `StatCard.vue`.**
  - Pass data down via props and communicate actions up via emitted events.
- **Composables:** Use Composables (`src/composables/`) to encapsulate reusable stateful logic, especially for forms. **Created `useTaskForm.ts` (used by `AddTaskModal`/`EditTaskModal`) and `useProjectForm.ts` (used by `AddProjectModal`/`EditProjectModal`).**
- **Event Handling:** Child components should emit specific events (e.g., `@deleteProject`, `@updateStatus`, `@close` for modals) with necessary IDs/payloads. Parent views listen for these events and call corresponding store actions or update state.
- **Styling:** Define a theme using CSS custom properties (variables) in a global stylesheet (`src/assets/main.css`). Apply styles within components using `var(--variable-name)`. **Theme updated to use a static dark pink/purple gradient background with an animated CSS "searchlight" effect.**
- **Animations:**
  - Use Vue's `<transition>` for page transitions and `<TransitionGroup>` for list transitions. **Basic CSS fade page transitions are implemented in `App.vue`.**
  - Use **GSAP** for modal entrance and exit (`BaseModal.vue` via `@enter` and `@leave` hooks), and visual feedback on CRUD operations (`ProjectCard.vue`, `TaskCard.vue`). **Simple fade-in animation re-introduced for modal entrance.**
  - Implement subtle CSS animations/transitions for hover states and microinteractions (`main.css`, component styles). **Implemented animated background blur for modals using `backdrop-filter` applied directly to mask.**
  - **Accessibility:** Implemented `prefers-reduced-motion` checks for page transitions (`App.vue`) and modal animations (`BaseModal.vue`) to disable animations if the user prefers reduced motion.
- **Modal Forms:** For adding/editing data (e.g., Projects, Tasks), use dedicated modal components (e.g., `AddProjectModal`, `EditTaskModal`) built upon `BaseModal`. These modal components encapsulate the form template and utilize reusable form composables (`useProjectForm`, `useTaskForm`) to manage state, validation, and submission logic, emitting events on success or closure.

## Tool Usage & Development Notes

- **`apply_diff` vs `write_to_file`:** The `apply_diff` tool has shown sensitivity to template syntax, especially comments near attributes or self-closing tags, leading to repeated failures. For complex modifications or after `apply_diff` fails, prefer using `write_to_file` to ensure accuracy, even though it replaces the entire file.
- **Template Syntax:** Pay close attention to Vue template syntax, particularly ensuring comments are _outside_ component tags and self-closing tags (`/>`) are used correctly. Ensure components that receive non-prop attributes or are within `<Transition>` have a single root element.
- **Supabase Configuration:** Store Supabase config keys (`VITE_SUPABASE_URL`, `VITE_SUPABASE_ANON_KEY`) in `.env` files and access them via `import.meta.env`. This has been implemented.
- **Supabase Row Level Security (RLS):** RLS policies are crucial for data security and must be correctly configured in the Supabase dashboard to ensure users can only access and modify their own data (`auth.uid() = user_id`).
- **Modal Implementation:** The `BaseModal.vue` component requires a closing `</style>` tag for the scoped style block to avoid "Element is missing end tag" errors. Ensure named slots (`#header`, `#body`, `#footer`) are correctly defined in the modal component when used. Background clicks on `BaseModal` should dismiss the modal. **Encountered persistent difficulty in styling `ProjectDetailModal` for an expansive size and removing its overlay, suggesting a need to better understand `BaseModal`'s intended usage patterns for different sizes. Resolved the spacing issue between the project title and meta information by setting `margin-bottom` on `.base-modal-header`, `padding-top` on `.base-modal-body`, `margin-top` on `.project-meta`, and `margin-bottom` on `.project-detail-header` to `0`, and adding `line-height: 1.2;` to `.project-detail-header h3` and `.project-meta`.** **Successfully resolved complex modal height and layout issues by setting `height: 100%` on `.base-modal-wrapper` and `.base-modal-container`, `flex-grow: 1` and `overflow-y: auto` on `.base-modal-body`, and using `padding-top` and `padding-bottom` on `.base-modal-mask` and `.base-modal-wrapper` respectively to control the top and bottom gaps.** **Implemented animated background blur for modals using `backdrop-filter` applied directly to the mask element (not just transition).** **Styled the Add Task modal (size, form elements, header, buttons) to match project visual identity.** **Ensured the menu button floats correctly above the modal with appropriate z-index.** **Implemented task display as rectangular cards in a responsive grid within the Project Detail Modal.** **Removed the "Close" button from the Project Detail Modal footer.** **Added `showCloseButton` prop to `BaseModal` to allow hiding the 'X' button (used for AuthModal).** **Adjusted `BaseModal` default container styles (removed `max-height`) and `AuthModal` internal spacing to prevent content overflow.** **Refactored `BaseModal.vue` to use Vue Transition JavaScript hooks (`@enter`, `@leave`) for managing GSAP animations. Removed modal entrance animation to resolve flickering.** **Re-introduced simple fade-in animation for modal entrance using GSAP in the `@enter` hook, ensuring proper timing with `gsap.set` and `requestAnimationFrame`.** **Implemented `prefers-reduced-motion` checks in `@enter` and `@leave` hooks to disable animations if preferred.** **Resolved occasional modal entrance flicker by setting initial `opacity: 0` via CSS on `.base-modal-mask` and removing the corresponding `gsap.set()` from the `@enter` hook.**
- **Performance Testing:** Lighthouse reports on the development server (`npm run dev`) can be misleading due to lack of production optimizations (minification, compression). Always test the production build locally using `npm run preview` for accurate performance metrics. **Used `rollup-plugin-visualizer` (via `npm run build`) to analyze production bundle composition.**
- **Dynamic Imports:** Successfully refactored GSAP usage across components (`App.vue`, `BaseModal.vue`, `ProjectCard.vue`, `TaskCard.vue`, **`TaskList.vue`, `ProjectListView.vue`**) to use dynamic `import()` statements. This resolved build warnings about mixed static/dynamic imports and improved code splitting by moving GSAP core and Flip plugin into separate chunks loaded on demand.
- **CSS Optimization:** Installed and configured `vite-plugin-purgecss` in `vite.config.ts` to remove unused CSS rules during production builds, reducing the final CSS bundle size.

## Project State & Plans

- **Current Focus:** **Testing and UI Polish.** (Edit Project functionality implemented and refactored).
- **Recent Work:**

  - **Refactoring:**
    - Decomposed `ProjectDetailModal` into `ProjectDetailHeader` and `TaskList`.
    - Extracted `StatCard` component from `DashboardView`.
    - Created `useTaskForm` composable and refactored `AddTaskModal`/`EditTaskModal`.
    - Created `useProjectForm` composable and refactored `AddProjectModal`/`EditProjectModal`.
    - Refactored `ProjectListView` to use `AddProjectModal`.
  - Completed significant UI/UX refinement phase:
    - Enhanced `BaseModal` aesthetics and functionality.
    - **Implemented basic CSS fade page transitions in `App.vue`.**
    - Refined list animations (`<TransitionGroup>`).
    - Added microinteractions (hover, click, focus).
    - Implemented visual feedback animations (GSAP) for adding projects/tasks and status changes.
    - Applied theme more broadly.
    - **Resolved Project Detail Modal layout, height, gap, and background blur issues.**
    - **Implemented task display as rectangular cards in a responsive grid.**
    - **Styled the Add Task modal (size, form elements, header, buttons).**
    - **Ensured the menu button floats correctly above the modal.**
    - **Removed the "Close" button from the Project Detail Modal footer.**
    - **Re-introduced simple fade-in animation for modal entrance in `BaseModal.vue`.**
    - **Implemented `prefers-reduced-motion` checks for page transitions and modal animations.**
  - Refactored "Add Project" to use the enhanced modal.
  - Updated Dashboard statistics (Total Projects, Tasks To Do count).
  - Resolved build errors related to template syntax.
  - Completed Supabase migration (Auth, DB, Realtime, RLS).
  - Implemented "Add Task" functionality using `BaseModal`.
  - Implemented Project Detail Modal (`ProjectDetailModal.vue`) and nested Add/Edit Task Modals.
  - Resolved the spacing issue between the project title and meta information in the Project Detail Modal.
  - **Optimized production build performance:** Addressed Lighthouse issues by dynamically importing GSAP and verifying build/preview process. Achieved high Lighthouse scores on production preview.
  - **Fixed reactive data loading:** Implemented `watch` in `projectStore` and `taskStore` to monitor `authStore.currentUser`, ensuring automatic project loading on login and proper data cleanup/unsubscription on logout.
  - **Fixed Dashboard Counters:** Resolved issues where project/task counts reset on navigation or refresh by implementing a dedicated state (`allUserTasks`) and fetch action (`fetchAllUserTasks`) in `taskStore` for global counts, triggered after projects load. Updated `DashboardView` to use this state and appropriate loading flags.
  - **Build Optimization:** Analyzed production bundle using `rollup-plugin-visualizer`. Implemented PurgeCSS via `vite-plugin-purgecss`. Refactored GSAP imports to be consistently dynamic across all components, improving code splitting.
  - **Theme Update:** Updated theme to use a static dark pink/purple gradient background with an animated CSS "searchlight" effect. Adjusted theme variables for contrast. Fixed modal blur persistence and AuthModal layout issues.
  - **Fixed Authentication Flow:** `AuthModal.vue` now uses `authStore.login` and `authStore.register` actions.
  - **Fixed Modal Closing Flicker:** Removed CSS transition on modal mask, relying on `v-if` removal after GSAP exit animation.
  - **Fixed Data Persistence on Refresh:** `authStore` triggers `projectStore.subscribeToProjects` on initial session load, which in turn triggers `taskStore.fetchAllUserTasks` after projects are loaded.
  - **Fixed Supabase Realtime Subscription Timeout:** Added logic in `projectStore` to attempt re-subscription on `CLOSED` or `TIMED_OUT` events.

- **Next Steps:**
  1. **Testing:** Begin comprehensive testing (unit, integration, E2E, cross-browser - Safari focus, performance testing). (High Priority)
  2. **Advanced Animations:** Explore further animations like drag-and-drop for task status changes. (Medium Priority)
  3. **UI/UX Polish:** Continued refinement based on testing feedback. (Medium Priority)
  4. **CI/CD:** Set up CI/CD pipeline. (Low Priority)
  5. Documentation: Continue updating Memory Bank and `.clinerules`. (Ongoing)

## Future Considerations

- **Advanced Animations:** Explore further GSAP capabilities (e.g., physics, complex timelines) or libraries like `@vueuse/motion` for specific effects like drag-and-drop.
- **Drag-and-Drop:** Consider libraries like `vuedraggable` or custom directives for implementing drag-and-drop task reordering/status changes.
- **Accessibility:** Continue to improve accessibility across the application, including focus management and ARIA attributes for interactive elements like modals and during animations. **Initial implementation of `prefers-reduced-motion` checks is complete.**
- **Data Migration:** (Not currently planned) If migrating existing user data from another platform becomes necessary, a separate migration script or process would be required.
- **Revisit Modal Entrance Animation:** The simple fade-in is implemented, but more complex entrance animations could be explored in the future if performance and rendering stability allow.
